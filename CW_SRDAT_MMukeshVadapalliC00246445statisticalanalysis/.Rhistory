knitr::opts_chunk$set(echo = TRUE)
#install.packages('rcompanion')
#install.packages('party')
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
library(MASS)
library(plyr)
library(psych)
library(miscset)
library(data.table)
library(Hmisc)
library(gridExtra)
library(skimr)
library(corrplot)
library(dummies)
library(caret)
library(Boruta)
library(pROC)
library(forcats)
library(ROCR)
hr <- read.csv("hranalytics.csv")
head(hr,10)
colnames(hr)[colnames(hr) == 'ï..Age'] <- 'Age'
names(hr)
knitr::opts_chunk$set(echo = TRUE)
#install.packages('rcompanion')
#install.packages('party')
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
library(MASS)
library(plyr)
library(psych)
library(miscset)
library(data.table)
library(Hmisc)
library(gridExtra)
library(skimr)
library(corrplot)
library(dummies)
library(caret)
library(Boruta)
library(pROC)
library(forcats)
library(ROCR)
hr <- read.csv("hranalytics.csv")
head(hr,10)
colnames(hr)[colnames(hr) == 'ï..Age'] <- 'Age'
names(hr)
str(hr)
intcols <- c("Education","EnvironmentSatisfaction","JobInvolvement","JobLevel","JobSatisfaction","PerformanceRating","RelationshipSatisfaction","StockOptionLevel","WorkLifeBalance")
hr[intcols] <- lapply(hr[intcols], factor)
skim(hr)
sum (is.na(duplicated(hr)))
multi.hist(hr[,sapply(hr, is.numeric)])
dthr <- hr
colsdt <- c("DistanceFromHome","MonthlyIncome","NumCompaniesWorked","YearsAtCompany","YearsSinceLastPromotion")
dthr[colsdt] <- lapply(dthr[colsdt], log)
multi.hist(dthr[colsdt])
hr <- hr[,-c(9,10,22,27)]
hr_categorical <- hr[,colnames(hr)[grepl('factor|logical|character',sapply(hr,class))]]
fig <- plot_ly(hr, labels = ~Attrition, type = 'pie')
fig <- fig %>% layout(title = 'Attrition in the company',marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 2)),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
ggplotGrid(ncol = 2,
lapply(c("Education", "Department", "EducationField", "BusinessTravel","Gender","MaritalStatus"),
function(col) {
ggplot(hr_categorical, aes_string(col)) + geom_bar(tat = "identity", width = 0.5, color = "yellow",fill='black') + coord_flip() + theme_minimal()
}))
ggplotGrid(ncol = 2,
lapply(c("EnvironmentSatisfaction", "JobLevel", "JobRole", "JobSatisfaction","JobInvolvement","OverTime"),
function(col) {
ggplot(hr_categorical, aes_string(col)) + geom_bar(tat = "identity", width = 0.5, color = "yellow",fill='black') + coord_flip() + theme_minimal()
}))
ggplotGrid(ncol = 2,
lapply(c("PerformanceRating", "RelationshipSatisfaction", "StockOptionLevel", "WorkLifeBalance"),
function(col) {
ggplot(hr_categorical, aes_string(col)) + geom_bar(tat = "identity", width = 0.5, color = "yellow",fill='black') + coord_flip() + theme_minimal()
}))
ggplot(hr,aes(Gender,MonthlyIncome,fill=Gender))+geom_boxplot()+theme(legend.position="none",plot.title=element_text(hjust=0.5,size=10))+labs(x="Gender",y="Salary",title="Salary with Gender")
hr %>%
group_by(Department, Attrition) %>%
tally() %>%
ggplot(aes(x = Department, y = n,fill=Attrition)) +
geom_bar(stat = "identity",width = 0.5, color = "black") +
theme_minimal()+
labs(x="Department", y="Number Attriation")+
ggtitle("Attrition according to the departent")
plot_ly(data = hr, x = ~Age, y = ~MonthlyIncome, color = ~Attrition,colors = "Set1")
ggplot(hr,aes(Age,MonthlyIncome,size=Age,col=factor(Attrition)))+geom_point(alpha=0.3)+theme_minimal()+labs(x="Age",y="MonthlyIncome",title="Attrition Level Comparision ",col="Attrition")+theme(legend.position="bottom",plot.title=element_text(size=14,hjust=0.6),plot.subtitle = element_text(size=10))+scale_color_brewer(palette="Set2")+facet_wrap(~MaritalStatus)
plot_ly(data = hr, x = ~JobRole, y = ~MonthlyIncome, color = ~Attrition,colors = "Set1")
hr %>%
ggplot(aes(x = JobSatisfaction, group = Attrition)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)),
stat="count",
alpha = 0.7) +
geom_text(aes(label = scales::percent(..prop..), y = ..prop.. ),
stat= "count",
vjust = -.5) +
labs(y = "Percentage", fill= "MaritalStatus") +
facet_grid(~Attrition) +
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle("Attrition")
hr %>%
ggplot(aes(x = OverTime, group = Attrition)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)),
stat="count",
alpha = 0.7) +
geom_text(aes(label = scales::percent(..prop..), y = ..prop.. ),
stat= "count",
vjust = -.5) +
labs(y = "Percentage", fill= "MaritalStatus") +
facet_grid(~Attrition) +
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle("Attrition")
outliers <- function(x){
q1 <- quantile(x,.25)
q3 <- quantile(x,.75)
IQR <- q3- q1
low_bound <- q1 - 1.5*IQR
high_bound <- q3 + 1.5*IQR
outlier_low <- subset(x, x<low_bound)
outlier_high <- subset(x, x>high_bound)
return(c(outlier_low, outlier_high))
}
hrout  <- hr[,sapply(hr, is.numeric)]
lapply(hrout,outliers)
ggplotGrid(ncol = 2,
lapply(c("MonthlyIncome", "TotalWorkingYears", "TrainingTimesLastYear","YearsAtCompany","YearsSinceLastPromotion","YearsInCurrentRole"),
function(col) {
ggplot(hrout, aes_string(col)) + geom_boxplot() + theme_minimal()
}))
hr1 <- hr
hr1[] <- lapply(hr1,as.integer)
corrplot(cor(hr1),method="pie")
hrpr <- hr
hrpr<-hrpr %>% mutate(Attrition=factor(Attrition)) %>% mutate(Attrition=fct_recode(Attrition,"0"="No","1"="Yes"))
hrpr <- dummy.data.frame(hrpr, sep = "_")
aliascheck <- alias(lm(Attrition_0 ~., data = hrpr))
hrpr<-hrpr[,-c(3,6,10,16,22,26,28,33,38,47,51,54,59,62,66,70,76)]
vif_output <- lm(Attrition_0 ~., data = hrpr)
vif_res <- car::vif(vif_output)
summary(vif_res)
print(vif_res)
vif_res > 2
hrpr<-hrpr[,c(1,2,3,4,5,8,9,10,12,13,15,16,17,18,19,20,21,22,23,24,27,28,29,30,31,32,33,34,35,38,39,40,41,44,45,46,45,48,49,50,51,53,54,56,57,58,62,63)]
hrpr <-hrpr[ , -which(names(hrpr) %in% c("NumCompaniesWorked.1"))]
set.seed(2017)
train <- sample(1:nrow(hrpr), nrow(hrpr)*.7)
test = -train
modeldata <- hrpr[train,]
validationdata <- hrpr[test,]
logmodelaa <- glm(Attrition_0 ~ Age, family=binomial(link="logit"), data = modeldata)
print(summary(logmodelaa))
results <- predict(logmodelaa,newdata=validationdata,type='response')
results <- ifelse(results>=0.5,1,0)
print("confusion matrix for Logistic Regression")
table(Actual_value = validationdata$Attrition_0,Predicted_value = results > 0.5)
validationdata <- validationdata[complete.cases(validationdata),]
data12 = na.omit(validationdata)
results <- factor(results)
data12$Attrition_0 <- factor(data12$Attrition_0)
confusionMatrix(results,data12$Attrition_0,mode = "sens_spec")
logmodel <- glm(Attrition_0 ~., family=binomial(link="logit"), data = modeldata)
print(summary(logmodel))
library(rcompanion)
nagelkerke(logmodel)
log_pred <- predict(logmodel,newdata=validationdata,na.action = na.pass)
log_pred <- ifelse(log_pred>=0.5,1,0)
print("confusion matrix for Logistic Regression")
table(Actual_value = validationdata$Attrition_0,Predicted_value = log_pred > 0.5)
validationdata <- validationdata[complete.cases(validationdata),]
data12 = na.omit(validationdata)
log_pred <- factor(log_pred)
data12$Attrition_0 <- factor(data12$Attrition_0)
confusionMatrix(log_pred,data12$Attrition_0)
logmodelsig <- glm(Attrition_0 ~ Age+BusinessTravel_Travel_Frequently+DistanceFromHome+EnvironmentSatisfaction_1+JobInvolvement_1+JobLevel_2+JobSatisfaction_1+NumCompaniesWorked+OverTime_No+RelationshipSatisfaction_1+StockOptionLevel_1+YearsSinceLastPromotion+YearsWithCurrManager, family=binomial(link="logit"), data = modeldata)
print(summary(logmodelsig))
nagelkerke(logmodelsig)
log_predsig <- predict(logmodelsig,newdata=validationdata,na.action = na.pass)
log_predsig <- ifelse(log_predsig>=0.5,1,0)
log_predsig <- factor(log_predsig)
confusionMatrix(log_predsig,data12$Attrition_0)
anova(logmodel, test = "Chisq")
logmodelannova <- glm(Attrition_0 ~ Age+BusinessTravel_Travel_Frequently+EnvironmentSatisfaction_1+JobInvolvement_1+JobLevel_2+NumCompaniesWorked+OverTime_No+RelationshipSatisfaction_1+StockOptionLevel_1+YearsWithCurrManager, family=binomial(link="logit"), data = modeldata)
print(summary(logmodelannova))
nagelkerke(logmodelannova)
log_predannova <- predict(logmodelannova,newdata=validationdata,na.action = na.pass)
log_predannova <- ifelse(log_predannova>=0.5,1,0)
print("confusion matrix for Logistic Regression")
table(Actual_value = validationdata$Attrition_0,Predicted_value = log_predannova > 0.5)
misClasificError1 <- mean(log_predannova != validationdata$Attrition_0)
print(paste('Logistic Regression Accuracy',1-misClasificError1))
log_predannova <- factor(log_predannova)
caret::confusionMatrix(log_predannova,data12$Attrition_0)
impvar <- varImp(logmodel, scale = FALSE)
apply(impvar,1,sort,decreasing=FALSE)
res <- predict(logmodel, modeldata, type = "response")
ROCRPred <- prediction(res, modeldata$Attrition_0  )
ROCRPerf <- performance(ROCRPred,"tpr","fpr")
plot(ROCRPerf,colorize = TRUE, print.cutoffs.at = seq(0.1, by = 0.1))
results <- predict(logmodel,newdata=validationdata,type='response')
results <- ifelse(results>=0.3,1,0)
print("confusion matrix for Logistic Regression")
table(Actual_value = validationdata$Attrition_0,Predicted_value = results > 0.2)
misClasificError1 <- mean(results != validationdata$Attrition_0)
print(paste('Logistic Regression Accuracy',1-misClasificError1))
rf.Plot<- plot.roc(as.numeric(validationdata$Attrition_0), as.numeric(log_pred),lwd=2, type="b", print.auc=TRUE,col ="blue")
RP.perf <- performance(ROCRPred, "prec", "rec")
plot (RP.perf)
f1score <-  performance(ROCRPred,"f")
plot(f1score)
predicted_data <- data.frame(probability.attri = logmodel$fitted.values, attr=modeldata$Attrition_0)
predicted_data <- predicted_data[order(predicted_data$probability.attri, decreasing = FALSE),]
predicted_data$rank <- 1:nrow(predicted_data)
ggplot(data= predicted_data, aes(x=rank, y=probability.attri))+geom_point(aes(color=factor(attr)),alpha=1,shape=4,stroke=2)+xlab("Index")+ylab("Predicted probability of Attrition")
knitr::opts_chunk$set(echo = TRUE)
#install.packages('rcompanion')
#install.packages('party')
#install.packages('ROCR')
#install.packages('psych')
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
library(MASS)
library(plyr)
library(psych)
library(miscset)
library(data.table)
library(Hmisc)
library(gridExtra)
library(skimr)
library(corrplot)
library(dummies)
library(caret)
library(Boruta)
library(pROC)
library(forcats)
library(ROCR)
hr <- read.csv("hranalytics.csv")
head(hr,10)
colnames(hr)[colnames(hr) == 'ï..Age'] <- 'Age'
names(hr)
str(hr)
intcols <- c("Education","EnvironmentSatisfaction","JobInvolvement","JobLevel","JobSatisfaction","PerformanceRating","RelationshipSatisfaction","StockOptionLevel","WorkLifeBalance")
hr[intcols] <- lapply(hr[intcols], factor)
skim(hr)
sum (is.na(duplicated(hr)))
multi.hist(hr[,sapply(hr, is.numeric)])
dthr <- hr
colsdt <- c("DistanceFromHome","MonthlyIncome","NumCompaniesWorked","YearsAtCompany","YearsSinceLastPromotion")
dthr[colsdt] <- lapply(dthr[colsdt], log)
multi.hist(dthr[colsdt])
hr <- hr[,-c(9,10,22,27)]
hr_categorical <- hr[,colnames(hr)[grepl('factor|logical|character',sapply(hr,class))]]
fig <- plot_ly(hr, labels = ~Attrition, type = 'pie')
fig <- fig %>% layout(title = 'Attrition in the company',marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 2)),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
ggplotGrid(ncol = 2,
lapply(c("Education", "Department", "EducationField", "BusinessTravel","Gender","MaritalStatus"),
function(col) {
ggplot(hr_categorical, aes_string(col)) + geom_bar(tat = "identity", width = 0.5, color = "yellow",fill='black') + coord_flip() + theme_minimal()
}))
ggplotGrid(ncol = 2,
lapply(c("EnvironmentSatisfaction", "JobLevel", "JobRole", "JobSatisfaction","JobInvolvement","OverTime"),
function(col) {
ggplot(hr_categorical, aes_string(col)) + geom_bar(tat = "identity", width = 0.5, color = "yellow",fill='black') + coord_flip() + theme_minimal()
}))
ggplotGrid(ncol = 2,
lapply(c("PerformanceRating", "RelationshipSatisfaction", "StockOptionLevel", "WorkLifeBalance"),
function(col) {
ggplot(hr_categorical, aes_string(col)) + geom_bar(tat = "identity", width = 0.5, color = "yellow",fill='black') + coord_flip() + theme_minimal()
}))
ggplot(hr,aes(Gender,MonthlyIncome,fill=Gender))+geom_boxplot()+theme(legend.position="none",plot.title=element_text(hjust=0.5,size=10))+labs(x="Gender",y="Salary",title="Salary with Gender")
hr %>%
group_by(Department, Attrition) %>%
tally() %>%
ggplot(aes(x = Department, y = n,fill=Attrition)) +
geom_bar(stat = "identity",width = 0.5, color = "black") +
theme_minimal()+
labs(x="Department", y="Number Attriation")+
ggtitle("Attrition according to the departent")
plot_ly(data = hr, x = ~Age, y = ~MonthlyIncome, color = ~Attrition,colors = "Set1")
ggplot(hr,aes(Age,MonthlyIncome,size=Age,col=factor(Attrition)))+geom_point(alpha=0.3)+theme_minimal()+labs(x="Age",y="MonthlyIncome",title="Attrition Level Comparision ",col="Attrition")+theme(legend.position="bottom",plot.title=element_text(size=14,hjust=0.6),plot.subtitle = element_text(size=10))+scale_color_brewer(palette="Set2")+facet_wrap(~MaritalStatus)
plot_ly(data = hr, x = ~JobRole, y = ~MonthlyIncome, color = ~Attrition,colors = "Set1")
hr %>%
ggplot(aes(x = JobSatisfaction, group = Attrition)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)),
stat="count",
alpha = 0.7) +
geom_text(aes(label = scales::percent(..prop..), y = ..prop.. ),
stat= "count",
vjust = -.5) +
labs(y = "Percentage", fill= "MaritalStatus") +
facet_grid(~Attrition) +
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle("Attrition")
hr %>%
ggplot(aes(x = OverTime, group = Attrition)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)),
stat="count",
alpha = 0.7) +
geom_text(aes(label = scales::percent(..prop..), y = ..prop.. ),
stat= "count",
vjust = -.5) +
labs(y = "Percentage", fill= "MaritalStatus") +
facet_grid(~Attrition) +
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
ggtitle("Attrition")
outliers <- function(x){
q1 <- quantile(x,.25)
q3 <- quantile(x,.75)
IQR <- q3- q1
low_bound <- q1 - 1.5*IQR
high_bound <- q3 + 1.5*IQR
outlier_low <- subset(x, x<low_bound)
outlier_high <- subset(x, x>high_bound)
return(c(outlier_low, outlier_high))
}
hrout  <- hr[,sapply(hr, is.numeric)]
lapply(hrout,outliers)
ggplotGrid(ncol = 2,
lapply(c("MonthlyIncome", "TotalWorkingYears", "TrainingTimesLastYear","YearsAtCompany","YearsSinceLastPromotion","YearsInCurrentRole"),
function(col) {
ggplot(hrout, aes_string(col)) + geom_boxplot() + theme_minimal()
}))
hr1 <- hr
hr1[] <- lapply(hr1,as.integer)
corrplot(cor(hr1),method="pie")
hrpr <- hr
hrpr<-hrpr %>% mutate(Attrition=factor(Attrition)) %>% mutate(Attrition=fct_recode(Attrition,"0"="No","1"="Yes"))
hrpr <- dummy.data.frame(hrpr, sep = "_")
aliascheck <- alias(lm(Attrition_0 ~., data = hrpr))
hrpr<-hrpr[,-c(3,6,10,16,22,26,28,33,38,47,51,54,59,62,66,70,76)]
vif_output <- lm(Attrition_0 ~., data = hrpr)
vif_res <- car::vif(vif_output)
summary(vif_res)
print(vif_res)
vif_res > 2
hrpr<-hrpr[,c(1,2,3,4,5,8,9,10,12,13,15,16,17,18,19,20,21,22,23,24,27,28,29,30,31,32,33,34,35,38,39,40,41,44,45,46,45,48,49,50,51,53,54,56,57,58,62,63)]
hrpr <-hrpr[ , -which(names(hrpr) %in% c("NumCompaniesWorked.1"))]
set.seed(2017)
train <- sample(1:nrow(hrpr), nrow(hrpr)*.7)
test = -train
modeldata <- hrpr[train,]
validationdata <- hrpr[test,]
logmodelaa <- glm(Attrition_0 ~ Age, family=binomial(link="logit"), data = modeldata)
print(summary(logmodelaa))
results <- predict(logmodelaa,newdata=validationdata,type='response')
results <- ifelse(results>=0.5,1,0)
print("confusion matrix for Logistic Regression")
table(Actual_value = validationdata$Attrition_0,Predicted_value = results > 0.5)
validationdata <- validationdata[complete.cases(validationdata),]
data12 = na.omit(validationdata)
results <- factor(results)
data12$Attrition_0 <- factor(data12$Attrition_0)
confusionMatrix(results,data12$Attrition_0,mode = "sens_spec")
logmodel <- glm(Attrition_0 ~., family=binomial(link="logit"), data = modeldata)
print(summary(logmodel))
library(rcompanion)
nagelkerke(logmodel)
log_pred <- predict(logmodel,newdata=validationdata,na.action = na.pass)
log_pred <- ifelse(log_pred>=0.5,1,0)
print("confusion matrix for Logistic Regression")
table(Actual_value = validationdata$Attrition_0,Predicted_value = log_pred > 0.5)
validationdata <- validationdata[complete.cases(validationdata),]
data12 = na.omit(validationdata)
log_pred <- factor(log_pred)
data12$Attrition_0 <- factor(data12$Attrition_0)
confusionMatrix(log_pred,data12$Attrition_0)
logmodelsig <- glm(Attrition_0 ~ Age+BusinessTravel_Travel_Frequently+DistanceFromHome+EnvironmentSatisfaction_1+JobInvolvement_1+JobLevel_2+JobSatisfaction_1+NumCompaniesWorked+OverTime_No+RelationshipSatisfaction_1+StockOptionLevel_1+YearsSinceLastPromotion+YearsWithCurrManager, family=binomial(link="logit"), data = modeldata)
print(summary(logmodelsig))
nagelkerke(logmodelsig)
log_predsig <- predict(logmodelsig,newdata=validationdata,na.action = na.pass)
log_predsig <- ifelse(log_predsig>=0.5,1,0)
log_predsig <- factor(log_predsig)
confusionMatrix(log_predsig,data12$Attrition_0)
anova(logmodel, test = "Chisq")
logmodelannova <- glm(Attrition_0 ~ Age+BusinessTravel_Travel_Frequently+EnvironmentSatisfaction_1+JobInvolvement_1+JobLevel_2+NumCompaniesWorked+OverTime_No+RelationshipSatisfaction_1+StockOptionLevel_1+YearsWithCurrManager, family=binomial(link="logit"), data = modeldata)
print(summary(logmodelannova))
nagelkerke(logmodelannova)
log_predannova <- predict(logmodelannova,newdata=validationdata,na.action = na.pass)
log_predannova <- ifelse(log_predannova>=0.5,1,0)
print("confusion matrix for Logistic Regression")
table(Actual_value = validationdata$Attrition_0,Predicted_value = log_predannova > 0.5)
misClasificError1 <- mean(log_predannova != validationdata$Attrition_0)
print(paste('Logistic Regression Accuracy',1-misClasificError1))
log_predannova <- factor(log_predannova)
caret::confusionMatrix(log_predannova,data12$Attrition_0)
impvar <- varImp(logmodel, scale = FALSE)
apply(impvar,1,sort,decreasing=FALSE)
res <- predict(logmodel, modeldata, type = "response")
ROCRPred <- prediction(res, modeldata$Attrition_0  )
ROCRPerf <- performance(ROCRPred,"tpr","fpr")
plot(ROCRPerf,colorize = TRUE, print.cutoffs.at = seq(0.1, by = 0.1))
results <- predict(logmodel,newdata=validationdata,type='response')
results <- ifelse(results>=0.3,1,0)
print("confusion matrix for Logistic Regression")
table(Actual_value = validationdata$Attrition_0,Predicted_value = results > 0.2)
misClasificError1 <- mean(results != validationdata$Attrition_0)
print(paste('Logistic Regression Accuracy',1-misClasificError1))
rf.Plot<- plot.roc(as.numeric(validationdata$Attrition_0), as.numeric(log_pred),lwd=2, type="b", print.auc=TRUE,col ="blue")
RP.perf <- performance(ROCRPred, "prec", "rec")
plot (RP.perf)
f1score <-  performance(ROCRPred,"f")
plot(f1score)
predicted_data <- data.frame(probability.attri = logmodel$fitted.values, attr=modeldata$Attrition_0)
predicted_data <- predicted_data[order(predicted_data$probability.attri, decreasing = FALSE),]
predicted_data$rank <- 1:nrow(predicted_data)
ggplot(data= predicted_data, aes(x=rank, y=probability.attri))+geom_point(aes(color=factor(attr)),alpha=1,shape=4,stroke=2)+xlab("Index")+ylab("Predicted probability of Attrition")
